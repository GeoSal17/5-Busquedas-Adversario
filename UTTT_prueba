from juegos_simplificado import ModeloJuegoZT2
from juegos_simplificado import juega_dos_jugadores
from minimax import jugador_negamax
from minimax import minimax_iterativo

class UltimateTicTacToe(ModeloJuegoZT2):
    def __init__(self):
    #     self.tablero = [[[[0 for _ in range(3)] for _ in range(3)] for _ in range(3)] for _ in range(3)]
    #     self.jugador = 1
    #     #return (self.tablero, self.jugador)
        self.inicializa()

    def inicializa(self):
        self.tablero = [[[[0 for _ in range(3)] for _ in range(3)] for _ in range(3)] for _ in range(3)] #matriz de matrices
        self.regiones_ganadas = [[0 for _ in range(3)] for _ in range(3)] #matriz grande para ver regiones terminadas
        self.jugador = 1
        return (self.tablero, self.jugador)
    
    def jugadas_legales(self, s, jugador):
        tablero, _ = s
        jugadas_legales = []
        for i in range(3):
            for j in range(3):
                if self.regiones_ganadas[i][j] == 0:  #región no terminada aun
                    for x in range(3):
                        for y in range(3):
                            if tablero[i][j][x][y] == 0:
                                jugadas_legales.append((i, j, x, y))
        return jugadas_legales
    
    def transicion(self, s, a, jugador):
        tablero, _ = s
        nuevo_tablero = [[[[tablero[i][j][x][y] for y in range(3)] for x in range(3)] for j in range(3)] for i in range(3)]
        regiones = [[self.regiones_ganadas[i][j] for j in range(3)] for i in range(3)]

        i, j, x, y = a
        nuevo_tablero[i][j][x][y] = jugador

        #checa si ya cayo ganador en la region
        if regiones[i][j] == 0:
            ganador = self.evalua_ganador(nuevo_tablero[i][j])
            if ganador != 0:
                regiones[i][j] = ganador
            elif all(nuevo_tablero[i][j][x][y] != 0 for x in range(3) for y in range(3)):
                regiones[i][j] = 3 #empate

        nuevo_estado = (nuevo_tablero, -jugador)
        nuevo_juego = UltimateTicTacToe()
        nuevo_juego.tablero = nuevo_tablero
        nuevo_juego.regiones_ganadas = regiones
        return nuevo_estado

    def terminal(self, s):
        #return self.es_ganador(1) or self.es_ganador(2) or np.all(s != 0)
        #tablero, _ = s
        regiones = self.regiones_ganadas
        ganador = self.evalua_ganador(sum(regiones, []))
        return ganador != 0 or all(c != 0 for fila in regiones for c in fila)
    
    def ganancia(self, s):
        regiones = self.regiones_ganadas
        ganador = self.evalua_ganador(sum(regiones, []))
        if ganador == 1:
            return 1
        elif ganador == 2:
            return -1
        else:
            return 0
        
    def evalua_ganador(self, celdas):
        if celdas[0] == celdas[4] == celdas[8] != 0:
            return celdas[0]
        if celdas[2] == celdas[4] == celdas[6] != 0:
            return celdas[2]
        for i in range(3):
            if celdas[3 * i] == celdas[3 * i + 1] == celdas[3 * i + 2] != 0:
                return celdas[3 * i]
            if celdas[i] == celdas[i + 3] == celdas[i + 6] != 0:
                return celdas[i]
        return 0

def pprint(tablero, regiones_ganadas=None):
    def valor_celda(val, k):
        if val == 0:
            return str(k)
        elif val == 1:
            return 'X'
        elif val == 2:
            return 'O'
        
    def valor_region(i,j):
        if not regiones_ganadas:
            return ''
        val = regiones_ganadas[i][j]
        if val == 1:
            return ' (X)'
        elif val == 2:
            return ' (O)'
        elif val == 3:
            return ' (=)'
        else:
            return ''
        
    tablero_completo = [['' for _ in range(9)] for _ in range(9)]
    for region in range(9):
        ri, rj = divmod(region, 3)
        for cell in range(9):
            ci, cj = divmod(cell, 3)
            i = ri * 3 + ci
            j = rj * 3 + cj
            val = tablero[ri][rj][ci][cj]
            tablero_completo[i][j] = valor_celda(val, cell)

    for i in range(9):
        row = ''
        for j in range(9):
            row += tablero_completo[i][j] + ' '
            if (j + 1) % 3 == 0 and j < 8:
                row += '| '
        print(row)
        if (i + 1) % 3 == 0 and i < 8:
            print('-' * 21)

    if regiones_ganadas:
        #print("\nEstado de regiones:")
        for i in range(3):
            estado_fila = ''
            for j in range(3):
                estado_fila += valor_region(i, j) + ' '
            print(estado_fila.strip())
        
def juega_ultimate_tic_tac_toe():
    juego = UltimateTicTacToe()
    estado = juego.inicializa()
    print("¡Bienvenido al Ultimate Tic Tac Toe!")
    
    while not juego.terminal(estado):
        tablero, jugador = estado
        print(f"\nTurno del jugador {'X' if jugador == 1 else 'O'}")
        #pprint(tablero, juego.regiones_ganadas)
        pprint(tablero)
        legales = juego.jugadas_legales(estado, jugador)
        #print("Jugadas legales (formato: i j x y):")
        #print(legales)

        while True:
            try:
                #entrada = input("Tu jugada (i j x y): ")
                #i, j, x, y = map(int, entrada.strip().split())
                entrada = input("Ingrese su jugada como 'region celda' (0-8 0-8): ")
                region, cell = map(int, entrada.strip().split())
                i, j = divmod(region, 3)
                x, y = divmod(cell, 3)
                move = (i, j, x, y)
                #if (i, j, x, y) in legales:
                if move in legales:
                    break
                else:
                    print("Jugada no válida! Intente de nuevo.")
            except:
                #print("Entrada inválida. Usa el formato: i j x y")
                print("Formato inválido. Debe ser dos números entre 0 y 8.")

        estado = juego.transicion(estado, (i, j, x, y), jugador)

    pprint(estado[0], juego.regiones_ganadas)
    resultado = juego.ganancia(estado)
    if resultado == 1:
        print("¡Ganó el jugador X!")
    elif resultado == -1:
        print("¡Ganó el jugador O!")
    else:
        print("¡Empate!")

if __name__ == '__main__':
    juega_ultimate_tic_tac_toe()
